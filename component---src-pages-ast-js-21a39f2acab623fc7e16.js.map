{"version":3,"sources":["webpack:///./src/pages/ast.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/utils/typography.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/link.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["AST","render","d","this","props","data","astToml","parser","Parser","replacer","key","value","includes","Array","isArray","length","examples","map","e","obj","parse","org","json","JSON","stringify","children","name","desc","React","Component","pageQuery","loader","enqueue","StaticQueryContext","createContext","StaticQueryDataRenderer","staticQueryData","query","finalData","Fragment","StaticQuery","Consumer","m","module","exports","require","default","theme","plugins","CodePlugin","typography","Typography","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","Link","to","activeClassName","other","test","href","rhythm","Container","styled","header","MenuItem","Menu","div","Title","h1","Logo","Header","siteTitle","defaultProps","Layout","title","site","siteMetadata","meta","content","lang","style","padding","paddingTop"],"mappings":"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","file":"component---src-pages-ast-js-21a39f2acab623fc7e16.js","sourcesContent":["import React from 'react'\nimport { Parser } from 'orga'\nimport Layout from '../components/layout'\nimport { graphql } from 'gatsby'\n\nexport default class AST extends React.Component {\n  render() {\n    const d = this.props.data.astToml\n    const parser = new Parser()\n    const replacer = (key, value) => {\n      if ([`parent`].includes(key)) return\n      if (Array.isArray(value) && value.length === 0) return\n      return value\n    }\n    const examples = d.examples.map(e => {\n      const obj = parser.parse(e.org)\n      const json = JSON.stringify(obj.children[0], replacer, 2)\n      return (\n        <div>\n          <h2>{ e.name }</h2>\n          <p>{ e.desc }</p>\n          <pre><code>{ e.org }</code></pre>\n          <p>Yields:</p>\n          <pre><code>{ json }</code></pre>\n        </div>\n      )\n    })\n    return (\n      <Layout>\n        <h1>Abstract Syntax Tree</h1>\n        { examples }\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query ast {\n    astToml {\n      examples {\n        name\n        org\n        desc\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Typography from \"typography\"\nimport theme from 'typography-theme-github'\nimport CodePlugin from 'typography-plugin-code'\ntheme.plugins = [\n  new CodePlugin(),\n]\n\nconst typography = new Typography(theme)\n\nexport default typography\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link as GatsbyLink } from \"gatsby\"\n\n// Since DOM elements <a> cannot receive activeClassName,\n// destructure the prop here and pass it only to GatsbyLink\nconst Link = ({ children, to, activeClassName, ...other }) => {\n  // Tailor the following test to your environment.\n  // This example assumes that any internal link (intended for Gatsby)\n  // will start with exactly one slash, and that anything else is external.\n  const internal = /^\\/(?!\\/)/.test(to)\n\n  // Use Gatsby Link for internal links, and <a> for others\n  if (internal) {\n    return (\n      <GatsbyLink to={to} activeClassName={activeClassName} {...other}>\n        {children}\n      </GatsbyLink>\n    )\n  }\n  return (\n    <a href={to} {...other}>\n      {children}\n    </a>\n  )\n}\n\nexport default Link\n","import styled from 'styled-components'\nimport Link from './link'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport typography from '../utils/typography'\nconst { rhythm } = typography\n\nconst Container = styled.header`\npadding-top: 3rem;\npadding-bottom: 2rem;\n`\n\nconst MenuItem = styled(Link)`\ndisplay: block;\ntext-decoration: none;\nborder-radius: 0.4rem;\npadding: .5rem 1.5rem;\ntext-align: center;\n&:hover {\n  text-decoration: none;\n  cursor: pointer;\n  background-color: #f1f1f1;\n}\n`\n\nconst Menu = styled.div`\ndisplay: flex;\njustify-content: center;\n`\n\nconst Title = styled.h1`\ncolor: gray;\nmargin: 0 auto;\npadding-bottom: ${rhythm(1.5)};\ntext-align: center;\nborder-bottom: none;\n`\n\nconst Logo = styled(Link)`\n`\n\n\nconst Header = ({ siteTitle }) => (\n  <Container>\n    <Logo to='/'>\n      <Title>{ siteTitle }</Title>\n    </Logo>\n    <Menu>\n      <MenuItem to=\"/docs\">DOCS</MenuItem>\n      <MenuItem to=\"/ast\">AST</MenuItem>\n      <MenuItem to=\"/syntax\">SYNTAX</MenuItem>\n      <MenuItem to=\"/roadmap\">ROADMAP</MenuItem>\n      <MenuItem to=\"https://github.com/xiaoxinghu/orgajs\">CODE</MenuItem>\n    </Menu>\n  </Container>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: '',\n}\n\nexport default Header\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport 'prismjs/themes/prism.css'\n\nconst Container = styled.div`\nmargin: auto;\nmax-width: 740px;\n`\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <Container>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </Container>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}