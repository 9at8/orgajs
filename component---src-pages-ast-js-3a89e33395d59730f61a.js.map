{"version":3,"sources":["webpack:///./src/pages/ast.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/utils/typography.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/link.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./node_modules/orga/src/node.js","webpack:///./node_modules/orga/src/inline.js","webpack:///./node_modules/orga/src/defaults.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/orga/src/index.js","webpack:///./node_modules/orga/src/parser.js","webpack:///./node_modules/orga/src/lexer.js","webpack:///./node_modules/orga/src/utils.js","webpack:///./node_modules/orga/src/processors/index.js","webpack:///./node_modules/orga/src/processors/keyword.js","webpack:///./node_modules/orga/src/processors/headline.js","webpack:///./node_modules/orga/src/uri.js","webpack:///./node_modules/orga/src/processors/line.js","webpack:///./node_modules/orga/src/processors/block.js","webpack:///./node_modules/orga/src/processors/list.js","webpack:///./node_modules/orga/src/processors/table.js","webpack:///./node_modules/orga/src/processors/horizontal-rule.js","webpack:///./node_modules/orga/src/processors/footnote.js","webpack:///./node_modules/orga/src/processors/blank.js"],"names":["AST","render","d","this","props","data","astToml","parser","Parser","replacer","key","value","includes","Array","isArray","length","examples","map","e","obj","parse","org","json","JSON","stringify","children","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","name","desc","_components_layout__WEBPACK_IMPORTED_MODULE_6__","React","Component","pageQuery","__webpack_require__","r","__webpack_exports__","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","createContext","Consumer","staticQueryData","query","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","typography_theme_github__WEBPACK_IMPORTED_MODULE_1__","typography_theme_github__WEBPACK_IMPORTED_MODULE_1___default","typography_plugin_code__WEBPACK_IMPORTED_MODULE_2__","typography_plugin_code__WEBPACK_IMPORTED_MODULE_2___default","theme","plugins","CodePlugin","typography","Typography","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","shape","Link","to","activeClassName","other","objectWithoutPropertiesLoose_default","test","react_default","gatsby_browser_entry","href","rhythm","Container","styled","header","_templateObject","MenuItem","_templateObject2","Menu","div","_templateObject3","Title","h1","_templateObject4","Logo","_templateObject5","Header","siteTitle","defaultProps","layout_templateObject","Layout","layout_Container","Helmet_default","title","site","siteMetadata","meta","content","lang","style","padding","paddingTop","_755544856","node","Node","type","push","prototype","with","parent","newNode","uri","LINK_PATTERN","FOOTNOTE_PATTERN","PRE","POST","BORDER","markup","marker","RegExp","_parse","pattern","text","post","exec","shift","before","after","pop","nodes","concat","reduce","all","hasOwnProperty","captures","label","markups","todos","dP","f","FProto","Function","nameRE","configurable","get","match","options","Lexer","lexer","prefix","_aks","_cel","peek","getToken","cursor","hasNext","lines","consume","next","index","tokens","i","tokenize","downgradeToLine","raw","trim","tryTo","process","restorePoint","result","bind","processor","document","split","parseSection","unagi","element","keys","attributes","section","token","p","escape","Syntax","rules","define","update","findIndex","newRule","splice","headlinePattern","join","level","keyword","priority","tags","str","filter","String","syntax","updateTODOs","timestamp","params","indent","bullet","ordered","checked","cells","input","matchOperatorsRe","TypeError","replace","headline","line","block","list","table","horizontalRule","footnote","blank","block.begin","list.item","table.row","field","toLowerCase","inlineParse","parsePlanning","parseDrawer","begin","t","planning","drawer","newSection","URL_PATTERN","link","protocol","q","ln","parseInt","startsWith","processQuery","processFilePath","newNodes","last","parseBlock","toUpperCase","format","self","parseListItem","item","undefined","search","parseList","c","row","parseTable","parseFootnote"],"mappings":"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","file":"component---src-pages-ast-js-3a89e33395d59730f61a.js","sourcesContent":["import React from 'react'\nimport { Parser } from 'orga'\nimport Layout from '../components/layout'\nimport { graphql } from 'gatsby'\n\nexport default class AST extends React.Component {\n  render() {\n    const d = this.props.data.astToml\n    const parser = new Parser()\n    const replacer = (key, value) => {\n      if ([`parent`].includes(key)) return\n      if (Array.isArray(value) && value.length === 0) return\n      return value\n    }\n    const examples = d.examples.map(e => {\n      const obj = parser.parse(e.org)\n      const json = JSON.stringify(obj.children[0], replacer, 2)\n      return (\n        <div>\n          <h2>{ e.name }</h2>\n          <p>{ e.desc }</p>\n          <pre><code>{ e.org }</code></pre>\n          <p>Yields:</p>\n          <pre><code>{ json }</code></pre>\n        </div>\n      )\n    })\n    return (\n      <Layout>\n        <h1>Abstract Syntax Tree</h1>\n        { examples }\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query ast {\n    astToml {\n      examples {\n        name\n        org\n        desc\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Typography from \"typography\"\nimport theme from 'typography-theme-github'\nimport CodePlugin from 'typography-plugin-code'\ntheme.plugins = [\n  new CodePlugin(),\n]\n\nconst typography = new Typography(theme)\n\nexport default typography\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link as GatsbyLink } from \"gatsby\"\n\n// Since DOM elements <a> cannot receive activeClassName,\n// destructure the prop here and pass it only to GatsbyLink\nconst Link = ({ children, to, activeClassName, ...other }) => {\n  // Tailor the following test to your environment.\n  // This example assumes that any internal link (intended for Gatsby)\n  // will start with exactly one slash, and that anything else is external.\n  const internal = /^\\/(?!\\/)/.test(to)\n\n  // Use Gatsby Link for internal links, and <a> for others\n  if (internal) {\n    return (\n      <GatsbyLink to={to} activeClassName={activeClassName} {...other}>\n        {children}\n      </GatsbyLink>\n    )\n  }\n  return (\n    <a href={to} {...other}>\n      {children}\n    </a>\n  )\n}\n\nexport default Link\n","import styled from 'styled-components'\nimport Link from './link'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport typography from '../utils/typography'\nconst { rhythm } = typography\n\nconst Container = styled.header`\npadding-top: 3rem;\npadding-bottom: 2rem;\n`\n\nconst MenuItem = styled(Link)`\ndisplay: block;\ntext-decoration: none;\nborder-radius: 0.4rem;\npadding: .5rem 1.5rem;\ntext-align: center;\n&:hover {\n  text-decoration: none;\n  cursor: pointer;\n  background-color: #f1f1f1;\n}\n`\n\nconst Menu = styled.div`\ndisplay: flex;\njustify-content: center;\n`\n\nconst Title = styled.h1`\ncolor: gray;\nmargin: 0 auto;\npadding-bottom: ${rhythm(1.5)};\ntext-align: center;\nborder-bottom: none;\n`\n\nconst Logo = styled(Link)`\n`\n\n\nconst Header = ({ siteTitle }) => (\n  <Container>\n    <Logo to='/'>\n      <Title>{ siteTitle }</Title>\n    </Logo>\n    <Menu>\n      <MenuItem to=\"/docs\">DOCS</MenuItem>\n      <MenuItem to=\"/ast\">AST</MenuItem>\n      <MenuItem to=\"/syntax\">SYNTAX</MenuItem>\n      <MenuItem to=\"https://github.com/xiaoxinghu/orgajs\">CODE</MenuItem>\n    </Menu>\n  </Container>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: '',\n}\n\nexport default Header\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport 'prismjs/themes/prism.css'\n\nconst Container = styled.div`\nmargin: auto;\nmax-width: 740px;\n`\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <Container>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </Container>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","function Node(type, children = []) {\n  this.type = type\n  this.children = []\n  this.push(children)\n}\n\nNode.prototype = {\n  with: function(data) {\n    var newNode = this\n    newNode = Object.assign(this, data)\n    return newNode\n  },\n\n  push: function(node) {\n    if (Array.isArray(node)) {\n      for (const n of node) {\n        this.push(n)\n      }\n    } else if (node instanceof Node) {\n      node.parent = this\n      this.children.push(node)\n    } else if (typeof node === `string`) {\n      var newNode = new Node(`text`).with({ value: node })\n      newNode.parent = this\n      this.children.push(newNode)\n    }\n  },\n}\n\nmodule.exports = Node\n","const Node = require('./node')\nconst uri = require('./uri')\n\nconst LINK_PATTERN = /(.*?)\\[\\[([^\\]]*)\\](?:\\[([^\\]]*)\\])?\\](.*)/m; // \\1 => link, \\2 => text\nconst FOOTNOTE_PATTERN = /(.*?)\\[fn:(\\w+)\\](.*)/\n\nconst PRE = `(?:[\\\\s\\\\({'\"]|^)`\nconst POST = `(?:[\\\\s-\\\\.,:!?'\\\\)}]|$)`\nconst BORDER = `[^,'\"\\\\s]`\n\nfunction markup(marker) {\n  return RegExp(`(.*?${PRE})${marker}(${BORDER}.*?)(?<=${BORDER})${marker}(${POST}.*)`, 'm')\n}\n\nfunction parse(text) {\n  text = _parse(LINK_PATTERN, text, (captures) => {\n    return new Node(`link`)\n      .with({ uri: uri(captures[0]), desc: captures[1] })\n  })\n\n  text = _parse(FOOTNOTE_PATTERN, text, (captures) => {\n    return new Node(`footnote.reference`)\n      .with({ label: captures[0] })\n  })\n\n  const markups = [\n    { name: `bold`, marker: `\\\\*` },\n    { name: `verbatim`, marker: `=` },\n    { name: `italic`, marker: `/` },\n    { name: `strikeThrough`, marker: `\\\\+` },\n    { name: `underline`, marker: `_` },\n    { name: `code`, marker: `~` },\n  ]\n  for (const { name, marker } of markups) {\n    text = _parse(markup(marker), text, (captures) => {\n      return new Node(name, captures[0])\n    })\n  }\n  return text\n}\n\n\nfunction _parse(pattern, text, post) {\n  if (typeof text === `string`) {\n    var m = pattern.exec(text)\n    if (!m) return [new Node(`text`).with({ value: text })]\n    m.shift()\n    let before = m.shift()\n    let after = m.pop()\n    var nodes = []\n    if ( before.length > 0 ) {\n      nodes.push(new Node(`text`).with({ value: before }))\n    }\n    if (m.length > 0) {\n      nodes.push(post(m))\n      // nodes.push(new Node(name).with({ value: match }))\n    }\n    if (after) {\n      nodes = nodes.concat(_parse(pattern, after, post))\n    }\n    return nodes\n  }\n\n  if (Array.isArray(text)) {\n    return text.reduce((all, node) => {\n      if (node.hasOwnProperty(`type`) && node.type !== `text`) {\n        return all.concat(node)\n      }\n      return all.concat(_parse(pattern, node, post))\n    }, [])\n  }\n\n  if (typeof text.value === `string`) {\n    return _parse(pattern, text.value, post)\n  }\n  return undefined\n}\n\nmodule.exports = {\n  parse,\n}\n","exports = {\n  todos: [`TODO`, `DONE`]\n}\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","const Parser = require('./parser')\n\nfunction parse(string, options = require('./defaults')) {\n  const parser = new Parser(options)\n  return parser.parse(string)\n}\n\nmodule.exports = {\n  Parser,\n  parse,\n}\n","const Lexer = require('./lexer')\nconst Node = require('./node')\n\nfunction Parser(options = require('./defaults')) {\n  this.options = options\n  this.lexer = new Lexer(this.options)\n  this.prefix = []\n  this._aks = {} // Affiliated Keywords\n  this._cel = 0 // Consecutive Empty Lines\n}\n\nParser.prototype.peek = function() {\n  if (this.prefix.length > 0) return this.prefix[0]\n  return this.getToken(this.cursor + 1)\n}\n\nParser.prototype.hasNext = function() {\n  return this.prefix.length > 0 || this.cursor + 1 < this.lines.length\n}\n\nParser.prototype.consume = function() {\n  if (this.prefix.length > 0) return this.prefix.shift()\n  this.cursor++\n  return this.getToken(this.cursor)\n}\n\nParser.prototype.next = function() {\n  return this.consume()\n}\n\nParser.prototype.getToken = function(index) {\n  var self = this\n  if (index >= self.lines.length) { return undefined }\n  if (index >= self.tokens.length) {\n    const start = self.tokens.length\n    for (var i = start; i <= index; i++) {\n      self.tokens.push(self.lexer.tokenize(self.lines[i]))\n    }\n  }\n  return self.tokens[index]\n}\n\nParser.prototype.downgradeToLine = function(index) {\n  const { raw } = this.tokens[index]\n  this.tokens[index] = { name: `line`, raw, data: { content: raw.trim() }}\n}\n\nParser.prototype.tryTo = function(process) {\n  const restorePoint = this.cursor\n  const result = process.bind(this)()\n  if (result) { return result }\n  this.cursor = restorePoint\n  return result\n}\n\nParser.prototype.processor = require('./processors')\n\nParser.prototype.parse = function(string) {\n  var self = this\n  const document = new Node('root').with({ meta: {} })\n  self.cursor = -1\n  self.lines = string.split('\\n') // TODO: more robust lines?\n  self.tokens = []\n  return this.parseSection(document)\n}\n\n/* Total Awareness -- according to Ross */\nParser.prototype.unagi = function(element) {\n  if (Object.keys(this._aks).length === 0) return element\n  element.attributes = this._aks\n  return element\n}\n\nParser.prototype.parseSection = function(section) {\n  const token = this.peek()\n  if (!token) return section\n  if (token.name !== `blank`) this._cel = 0 // reset consecutive empty lines\n  const p = this.processor[token.name]\n  if (p) {\n    return p.bind(this)(token, section)\n  }\n  this.consume()\n  this._aks = {}\n  return this.parseSection(section)\n}\n\nmodule.exports = Parser\n","const { escape } = require('./utils')\n\nfunction Syntax() {\n  this.rules = []\n}\n\nSyntax.prototype = {\n  define: function(name, pattern, post = () => { return {} }) {\n    this.rules.push({\n      name,\n      pattern,\n      post,\n    })\n  },\n\n  update: function(name, pattern) {\n    const i = this.rules.findIndex(r => r.name === name)\n    var newRule = { name, post: () => {} }\n    if (i !== -1) {\n      newRule = this.rules.splice(i, 1)[0]\n    }\n    newRule.pattern = pattern\n    this.rules.splice(i, 0, newRule)\n  }\n}\n\nvar org = new Syntax()\n\nfunction headlinePattern(todos = ['TODO', 'DONE']) {\n  return RegExp(`^(\\\\*+)\\\\s+(?:(${todos.map(escape).join('|')})\\\\s+)?(?:\\\\[#(A|B|C)\\\\]\\\\s+)?(.*?)\\\\s*(:(?:\\\\w+:)+)?$`)\n}\n\norg.define('headline', headlinePattern(), m => {\n  const level = m[1].length\n  const keyword = m[2]\n  const priority = m[3]\n  const content = m[4]\n  const tags = (m[5] || '').split(':').map( str => str.trim()).filter(String)\n  return { level, keyword, priority, content, tags }\n})\n\norg.define('keyword', /^\\s*#\\+(\\w+):\\s*(.*)$/, m => {\n  const key = m[1]\n  const value = m[2]\n  return { key, value }\n})\n\nconst PLANNING_KEYWORDS = ['DEADLINE', 'SCHEDULED', 'CLOSED']\norg.define('planning', RegExp(`^\\\\s*(${PLANNING_KEYWORDS.join('|')}):\\\\s*(.+)$`), m => {\n  const keyword = m[1]\n  const timestamp = m[2]\n  return { keyword, timestamp }\n})\n\norg.define('block.begin', /^\\s*#\\+begin_(\\w+)(.*)$/i, m => {\n  const type = m[1]\n  const params = m[2].split(' ').map( str => str.trim()).filter(String)\n  return { type, params }\n})\n\norg.define('block.end', /^\\s*#\\+end_(\\w+)$/i, m => {\n  const type = m[1]\n  return { type }\n})\n\norg.define('drawer.end', /^\\s*:end:\\s*$/i)\n\norg.define('drawer.begin', /^\\s*:(\\w+):\\s*$/, m => {\n  const type = m[1]\n  return { type }\n})\n\norg.define('list.item', /^(\\s*)([-+]|\\d+[.)])\\s+(?:\\[(x|X|-| )\\])?(.*)$/, m => {\n  const indent = m[1].length\n  const bullet = m[2]\n  const content = m[4]\n  var ordered = true\n  if ( [`-`, `+`].includes(bullet) ) {\n    ordered = false\n  }\n\n  var result = { indent, ordered, content }\n  if (m[3]) {\n    var checked = m[3] !== ' '\n    result.checked = checked\n  }\n  return result\n})\n\norg.define('table.separator', /^\\s*\\|-/)\n\norg.define('table.row', /^\\s*\\|(\\s*.+\\|)+\\s*$/, m => {\n  const cells = m[1].split('|').map( str => str.trim()).filter(String)\n  return { cells }\n})\n\norg.define('horizontalRule', /^\\s*-{5,}\\s*$/)\n\norg.define('comment', /^\\s*#\\s.*$/)\n\norg.define('footnote', /^\\[fn:(\\w+)\\]\\s+(.*)$/, m => {\n  const label = m[1]\n  const content = m[2]\n  return { label, content }\n})\n\nfunction Lexer(options = require('./defaults')) {\n  this.syntax = org\n  const { todos } = options\n  if (todos) {\n    this.updateTODOs(todos)\n  }\n}\n\nLexer.prototype = {\n  tokenize: function (input) {\n    for ( const { name, pattern, post } of this.syntax.rules ) {\n      const m = pattern.exec(input)\n      if (!m) { continue }\n      var token = { name, raw: input }\n      token.data = post(m)\n      return token\n    }\n\n    const trimed = input.trim()\n    if (trimed === '') {\n      return { name: `blank`, raw: input }\n    }\n\n    return { name: `line`, raw: input }\n  },\n\n  updateTODOs: function(todos) {\n    this.syntax.update(`headline`, headlinePattern(todos))\n  }\n\n}\n\nmodule.exports = Lexer\n","var matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g\n\nfunction escape(str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string')\n  }\n  return str.replace(matchOperatorsRe, '\\\\$&')\n}\n\nmodule.exports = { escape }\n","const keyword = require('./keyword')\nconst headline = require('./headline')\nconst line = require('./line')\nconst block = require('./block')\nconst list = require('./list')\nconst table = require('./table')\nconst horizontalRule = require('./horizontal-rule')\nconst footnote = require('./footnote')\nconst blank = require('./blank')\n\nmodule.exports = {\n  keyword,\n  headline,\n  line,\n  \"block.begin\": block,\n  \"list.item\": list,\n  \"table.row\": table,\n  horizontalRule,\n  footnote,\n  blank,\n}\n","const Node = require('../node')\n\nfunction process(token, section) {\n  const { key, value } = token.data\n  switch (key) {\n  case `TODO`:\n    if (section.type !== `root`) break\n    const todos = value.split(/\\s|\\|/g).filter(String)\n    section.meta.todos = todos\n    this.lexer.updateTODOs(todos)\n    break\n  case `HTML`:\n    section.push(new Node(`html`).with({ value }))\n    break\n  case `CAPTION`:\n  case `HEADER`:\n  case `NAME`:\n  case `PLOT`:\n  case `RESULTS`:\n    this._aks[key] = value\n    break\n  default:\n    if (section.type === `root`) {\n      let field = key.toLowerCase()\n        if (!section.meta[field]) {\n          section.meta[field] = value;\n        }\n        else {\n          if (!Array.isArray(section.meta[field])) {\n            let list = [];\n            list.push(section.meta[field])\n            section.meta[field] = list\n          }\n          section.meta[field].push(value)\n        }\n    }\n    break\n  }\n  this.consume()\n  return this.parseSection(section)\n}\n\nmodule.exports = process\n","const Node = require('../node')\nconst inlineParse = require('../inline').parse\n\nfunction parsePlanning() {\n  const token = this.next()\n  if (!token || token.name !== `planning`) { return undefined }\n  return new Node('planning').with(token.data)\n}\n\nfunction parseDrawer() {\n  const begin = this.next()\n  var lines = []\n  while (this.hasNext()) {\n    const t = this.next()\n    if ( t.name === `headline` ) { return undefined }\n    if (t.name === `drawer.end` ) {\n      return new Node('drawer').with({ name: begin.data.type, value: lines.join(`\\n`) })\n    }\n    lines.push(t.raw)\n  }\n  return undefined\n}\n\nfunction process(token, section) {\n  if (section.type === `footnote.definition`) return section // headline breaks footnote\n  const { level, keyword, priority, tags, content } = token.data\n  const currentLevel = section.level || 0\n  if (level <= currentLevel) { return section }\n  this.consume()\n  const text = inlineParse(content)\n  var headline = new Node('headline', text).with({\n    level, keyword, priority, tags\n  })\n  const planning = this.tryTo(parsePlanning)\n  if (planning) {\n    headline.push(planning)\n  }\n\n  while (this.hasNext() && this.peek().name === `drawer.begin`) {\n    let drawer = this.tryTo(parseDrawer)\n    if (!drawer) { // broken drawer\n      this.downgradeToLine(this.cursor + 1)\n      break\n    }\n    headline.push(drawer)\n  }\n  const newSection = new Node(`section`).with({ level })\n  newSection.push(headline)\n  section.push(this.parseSection(this.unagi(newSection)))\n  this._aks = {}\n  return this.parseSection(section)\n}\n\nmodule.exports = process\n","const URL_PATTERN = /(?:([a-z][a-z0-9+.-]*):)?(.*)/\n\nfunction parse(link) {\n  var result = { raw: link }\n  const m = URL_PATTERN.exec(link)\n  if (!m) return result\n  result.protocol = (m[1] || (isFilePath(m[2]) ? `file` : `internal`)).toLowerCase()\n  result.location = m[2]\n  return processFilePath(result)\n\n  function isFilePath(str) {\n    return str.match(/^\\.{0,2}\\//)\n  }\n}\n\nfunction processFilePath(link) {\n  if (link.protocol !== `file`) return link\n  // const pattern = /([^:]*?)(?:::(.*))?/\n  const pattern = /(.*?)::(.*)/\n  const m = pattern.exec(link.location)\n  if (!m) return link\n  if (m[2]) {\n    link.location = m[1]\n    link.query = processQuery(m[2])\n  }\n  return link\n}\n\nfunction processQuery(q) {\n  const ln = parseInt(q)\n  if (ln) {\n    return { ln }\n  }\n  if (q.startsWith(`*`)) {\n    const headline = q.replace(/^\\*+/, '')\n    return { headline }\n  }\n  return { text: q }\n}\n\nmodule.exports = parse\n","const Node = require('../node')\nconst inlineParse = require('../inline').parse\n\nfunction process(token, section) {\n\n  var nodes = []\n  while (this.hasNext()) {\n    const token = this.peek()\n    // also eats broken block/drawer ends\n    if (![`line`, `block.end`, `drawer.end`].includes(token.name)) break\n    this.consume()\n    push(token.raw.trim())\n  }\n  section.push(new Node(`paragraph`, nodes))\n\n  this._aks = {}\n  return this.parseSection(section)\n\n  function push(line) {\n    let newNodes = inlineParse(line)\n    // merge text newNodes\n    if (nodes.length > 0 &&\n        nodes[nodes.length - 1].type === `text` &&\n        newNodes.length > 0 &&\n        newNodes[0].type === `text`) {\n      const n = newNodes.shift()\n      let last = nodes.pop()\n      last.value = `${last.value} ${n.value}`\n      nodes.push(last)\n    }\n\n    nodes = [...nodes, ...newNodes]\n  }\n}\n\nmodule.exports = process\n","const Node = require('../node')\n\nfunction parseBlock() {\n  const t = this.next()\n  const { data: { type, params } } = t\n  var lines = []\n  while (this.hasNext()) {\n    const t = this.next()\n    if ( t.name === `headline` ) { return undefined }\n    if (t.name === `block.end` && t.data.type.toUpperCase() === type.toUpperCase() ) {\n      if (t.data.type.toUpperCase() === `EXPORT`) {\n        const format = params[0]\n        return new Node(format).with({ value: lines.join(`\\n`) })\n      }\n      return new Node('block').with({ name: type.toUpperCase(), params, value: lines.join(`\\n`) })\n    }\n    lines.push(t.raw)\n  }\n  return undefined\n}\n\nfunction process(token, section) {\n  const block = this.tryTo(parseBlock)\n  if (block) section.push(this.unagi(block))\n  else this.downgradeToLine(this.cursor + 1)\n  this._aks = {}\n  return this.parseSection(section)\n}\n\nmodule.exports = process\n","const Node = require('../node')\nconst inlineParse = require('../inline').parse\n\nfunction process(token, section) {\n\n  var self = this\n\n  const parseListItem = () => {\n    const { indent, content, ordered, checked } = self.next().data\n    var lines = [content]\n    const item = new Node(`list.item`).with({ ordered })\n    if (checked !== undefined) {\n      item.checked = checked\n    }\n    while (self.hasNext()) {\n      const { name, raw } = self.peek()\n      if (name !== `line`) break\n      const lineIndent = raw.search(/\\S/)\n      if (lineIndent <= indent) break\n      lines.push(self.next().raw.trim())\n    }\n    item.push(inlineParse(lines.join(` `)))\n    return item\n  }\n\n  const parseList = level => {\n    const list = new Node(`list`)\n    while (self.hasNext()) {\n      const token = self.peek()\n      if ( token.name !== `list.item` ) break\n      const { indent } = token.data\n      if (indent <= level) break\n      const item = parseListItem()\n      item.push(parseList(indent))\n      list.push(item)\n    }\n    if (list.children.length > 0) { // list\n      list.ordered = list.children[0].ordered\n      return list\n    }\n    return undefined\n  }\n\n  section.push(this.unagi(parseList(-1)))\n  this._aks = {}\n  return this.parseSection(section)\n}\n\nmodule.exports = process\n","const Node = require('../node')\nconst inlineParse = require('../inline').parse\n\nfunction process(token, section) {\n\n  var self = this\n\n  const parseTable = () => {\n    const table = new Node(`table`)\n    while (self.hasNext()) {\n      const token = self.peek()\n      if ( !token.name.startsWith(`table.`) ) break\n      self.consume()\n      if (token.name === `table.separator`) {\n        table.push(new Node(`table.separator`))\n        continue\n      }\n      if ( token.name !== `table.row` ) break\n      const cells = token.data.cells.map(c => new Node(`table.cell`, inlineParse(c)))\n      const row = new Node(`table.row`, cells)\n      table.push(row)\n    }\n    return table\n  }\n\n  const table = this.unagi(parseTable())\n  section.push(table)\n\n  return this.parseSection(section)\n}\n\nmodule.exports = process\n","const Node = require('../node')\n\nfunction process(token, section) {\n  this.consume()\n  section.push(new Node(`horizontalRule`))\n  this._aks = {}\n  return this.parseSection(section)\n}\n\nmodule.exports = process\n","const Node = require('../node')\n\nfunction process(token, section) {\n\n  if (section.type === `footnote.definition`) return section // footnote breaks footnote\n  var self = this\n\n  const parseFootnote = () => {\n    const { label, content } = self.next().data\n    self.prefix = [{ name: `line`, raw: content, data: { content: content.trim() } }]\n    return self.parseSection(new Node(`footnote.definition`).with({ label }))\n  }\n  section.push(parseFootnote())\n  self._aks = {}\n  return self.parseSection(section)\n}\n\nmodule.exports = process\n","function process(token, section) {\n  var self = this\n  self._cel++\n  self.consume()\n  if (section.type === `footnote` && self._cel > 1) return section\n  self._aks = {}\n  return self.parseSection(section)\n}\n\nmodule.exports = process\n"],"sourceRoot":""}